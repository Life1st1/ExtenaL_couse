
Gpio.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000238  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000344  08000344  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000344  08000344  00020004  2**0
                  CONTENTS
  4 .ARM          00000000  08000344  08000344  00020004  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000344  08000344  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000344  08000344  00010344  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000348  08000348  00010348  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000004  20000000  0800034c  00020000  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  20000004  08000350  00020004  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000024  08000350  00020024  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
 12 .debug_info   00000eae  00000000  00000000  0002002d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000004fa  00000000  00000000  00020edb  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000001c8  00000000  00000000  000213d8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000180  00000000  00000000  000215a0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000151b5  00000000  00000000  00021720  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00001c46  00000000  00000000  000368d5  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0007aab6  00000000  00000000  0003851b  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000b2fd1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000558  00000000  00000000  000b304c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000004 	.word	0x20000004
 8000128:	00000000 	.word	0x00000000
 800012c:	0800032c 	.word	0x0800032c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000008 	.word	0x20000008
 8000148:	0800032c 	.word	0x0800032c

0800014c <SysInit>:
#include<stm32f1xx.h>

void SysInit(){
 800014c:	b480      	push	{r7}
 800014e:	af00      	add	r7, sp, #0
	RCC->CR	|= (uint32_t)1<<0;
 8000150:	4b0e      	ldr	r3, [pc, #56]	; (800018c <SysInit+0x40>)
 8000152:	681b      	ldr	r3, [r3, #0]
 8000154:	4a0d      	ldr	r2, [pc, #52]	; (800018c <SysInit+0x40>)
 8000156:	f043 0301 	orr.w	r3, r3, #1
 800015a:	6013      	str	r3, [r2, #0]
	while((RCC->CR & (uint32_t)(1<<1)) == 0);
 800015c:	bf00      	nop
 800015e:	4b0b      	ldr	r3, [pc, #44]	; (800018c <SysInit+0x40>)
 8000160:	681b      	ldr	r3, [r3, #0]
 8000162:	f003 0302 	and.w	r3, r3, #2
 8000166:	2b00      	cmp	r3, #0
 8000168:	d0f9      	beq.n	800015e <SysInit+0x12>
	RCC->APB2ENR |= 1<<0;
 800016a:	4b08      	ldr	r3, [pc, #32]	; (800018c <SysInit+0x40>)
 800016c:	699b      	ldr	r3, [r3, #24]
 800016e:	4a07      	ldr	r2, [pc, #28]	; (800018c <SysInit+0x40>)
 8000170:	f043 0301 	orr.w	r3, r3, #1
 8000174:	6193      	str	r3, [r2, #24]
	RCC->APB2ENR |= 1<<4;
 8000176:	4b05      	ldr	r3, [pc, #20]	; (800018c <SysInit+0x40>)
 8000178:	699b      	ldr	r3, [r3, #24]
 800017a:	4a04      	ldr	r2, [pc, #16]	; (800018c <SysInit+0x40>)
 800017c:	f043 0310 	orr.w	r3, r3, #16
 8000180:	6193      	str	r3, [r2, #24]
}
 8000182:	bf00      	nop
 8000184:	46bd      	mov	sp, r7
 8000186:	bc80      	pop	{r7}
 8000188:	4770      	bx	lr
 800018a:	bf00      	nop
 800018c:	40021000 	.word	0x40021000

08000190 <GpioInit>:

void GpioInit(){
 8000190:	b480      	push	{r7}
 8000192:	af00      	add	r7, sp, #0
	GPIOC->CRH |= 3<<20;
 8000194:	4b07      	ldr	r3, [pc, #28]	; (80001b4 <GpioInit+0x24>)
 8000196:	685b      	ldr	r3, [r3, #4]
 8000198:	4a06      	ldr	r2, [pc, #24]	; (80001b4 <GpioInit+0x24>)
 800019a:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800019e:	6053      	str	r3, [r2, #4]
	GPIOC->CRH |= 2<<20;
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <GpioInit+0x24>)
 80001a2:	685b      	ldr	r3, [r3, #4]
 80001a4:	4a03      	ldr	r2, [pc, #12]	; (80001b4 <GpioInit+0x24>)
 80001a6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80001aa:	6053      	str	r3, [r2, #4]
}
 80001ac:	bf00      	nop
 80001ae:	46bd      	mov	sp, r7
 80001b0:	bc80      	pop	{r7}
 80001b2:	4770      	bx	lr
 80001b4:	40011000 	.word	0x40011000

080001b8 <Delay>:

void Delay(int time){
 80001b8:	b480      	push	{r7}
 80001ba:	b083      	sub	sp, #12
 80001bc:	af00      	add	r7, sp, #0
 80001be:	6078      	str	r0, [r7, #4]
	while(time--);
 80001c0:	bf00      	nop
 80001c2:	687b      	ldr	r3, [r7, #4]
 80001c4:	1e5a      	subs	r2, r3, #1
 80001c6:	607a      	str	r2, [r7, #4]
 80001c8:	2b00      	cmp	r3, #0
 80001ca:	d1fa      	bne.n	80001c2 <Delay+0xa>
}
 80001cc:	bf00      	nop
 80001ce:	370c      	adds	r7, #12
 80001d0:	46bd      	mov	sp, r7
 80001d2:	bc80      	pop	{r7}
 80001d4:	4770      	bx	lr
	...

080001d8 <main>:
int main(void){
 80001d8:	b580      	push	{r7, lr}
 80001da:	af00      	add	r7, sp, #0
	SysInit();
 80001dc:	f7ff ffb6 	bl	800014c <SysInit>
	GpioInit();
 80001e0:	f7ff ffd6 	bl	8000190 <GpioInit>
	while(1){
		GPIOC->ODR |= 1<<13;
 80001e4:	4b09      	ldr	r3, [pc, #36]	; (800020c <main+0x34>)
 80001e6:	68db      	ldr	r3, [r3, #12]
 80001e8:	4a08      	ldr	r2, [pc, #32]	; (800020c <main+0x34>)
 80001ea:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80001ee:	60d3      	str	r3, [r2, #12]
		Delay(100000);
 80001f0:	4807      	ldr	r0, [pc, #28]	; (8000210 <main+0x38>)
 80001f2:	f7ff ffe1 	bl	80001b8 <Delay>
		GPIOC->ODR &= ~(1<<13);
 80001f6:	4b05      	ldr	r3, [pc, #20]	; (800020c <main+0x34>)
 80001f8:	68db      	ldr	r3, [r3, #12]
 80001fa:	4a04      	ldr	r2, [pc, #16]	; (800020c <main+0x34>)
 80001fc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8000200:	60d3      	str	r3, [r2, #12]
		Delay(100000);
 8000202:	4803      	ldr	r0, [pc, #12]	; (8000210 <main+0x38>)
 8000204:	f7ff ffd8 	bl	80001b8 <Delay>
		GPIOC->ODR |= 1<<13;
 8000208:	e7ec      	b.n	80001e4 <main+0xc>
 800020a:	bf00      	nop
 800020c:	40011000 	.word	0x40011000
 8000210:	000186a0 	.word	0x000186a0

08000214 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000214:	b480      	push	{r7}
 8000216:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000218:	bf00      	nop
 800021a:	46bd      	mov	sp, r7
 800021c:	bc80      	pop	{r7}
 800021e:	4770      	bx	lr

08000220 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000220:	b480      	push	{r7}
 8000222:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000224:	e7fe      	b.n	8000224 <HardFault_Handler+0x4>

08000226 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000226:	b480      	push	{r7}
 8000228:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800022a:	e7fe      	b.n	800022a <MemManage_Handler+0x4>

0800022c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800022c:	b480      	push	{r7}
 800022e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000230:	e7fe      	b.n	8000230 <BusFault_Handler+0x4>

08000232 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000232:	b480      	push	{r7}
 8000234:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000236:	e7fe      	b.n	8000236 <UsageFault_Handler+0x4>

08000238 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000238:	b480      	push	{r7}
 800023a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800023c:	bf00      	nop
 800023e:	46bd      	mov	sp, r7
 8000240:	bc80      	pop	{r7}
 8000242:	4770      	bx	lr

08000244 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000244:	b480      	push	{r7}
 8000246:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000248:	bf00      	nop
 800024a:	46bd      	mov	sp, r7
 800024c:	bc80      	pop	{r7}
 800024e:	4770      	bx	lr

08000250 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000250:	b480      	push	{r7}
 8000252:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000254:	bf00      	nop
 8000256:	46bd      	mov	sp, r7
 8000258:	bc80      	pop	{r7}
 800025a:	4770      	bx	lr

0800025c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800025c:	b580      	push	{r7, lr}
 800025e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000260:	f000 f82e 	bl	80002c0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000264:	bf00      	nop
 8000266:	bd80      	pop	{r7, pc}

08000268 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000268:	b480      	push	{r7}
 800026a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800026c:	bf00      	nop
 800026e:	46bd      	mov	sp, r7
 8000270:	bc80      	pop	{r7}
 8000272:	4770      	bx	lr

08000274 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8000274:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8000276:	e003      	b.n	8000280 <LoopCopyDataInit>

08000278 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8000278:	4b0b      	ldr	r3, [pc, #44]	; (80002a8 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 800027a:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 800027c:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 800027e:	3104      	adds	r1, #4

08000280 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8000280:	480a      	ldr	r0, [pc, #40]	; (80002ac <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8000282:	4b0b      	ldr	r3, [pc, #44]	; (80002b0 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8000284:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8000286:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8000288:	d3f6      	bcc.n	8000278 <CopyDataInit>
  ldr r2, =_sbss
 800028a:	4a0a      	ldr	r2, [pc, #40]	; (80002b4 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 800028c:	e002      	b.n	8000294 <LoopFillZerobss>

0800028e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 800028e:	2300      	movs	r3, #0
  str r3, [r2], #4
 8000290:	f842 3b04 	str.w	r3, [r2], #4

08000294 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8000294:	4b08      	ldr	r3, [pc, #32]	; (80002b8 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8000296:	429a      	cmp	r2, r3
  bcc FillZerobss
 8000298:	d3f9      	bcc.n	800028e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800029a:	f7ff ffe5 	bl	8000268 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800029e:	f000 f821 	bl	80002e4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80002a2:	f7ff ff99 	bl	80001d8 <main>
  bx lr
 80002a6:	4770      	bx	lr
  ldr r3, =_sidata
 80002a8:	0800034c 	.word	0x0800034c
  ldr r0, =_sdata
 80002ac:	20000000 	.word	0x20000000
  ldr r3, =_edata
 80002b0:	20000004 	.word	0x20000004
  ldr r2, =_sbss
 80002b4:	20000004 	.word	0x20000004
  ldr r3, = _ebss
 80002b8:	20000024 	.word	0x20000024

080002bc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80002bc:	e7fe      	b.n	80002bc <ADC1_2_IRQHandler>
	...

080002c0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80002c0:	b480      	push	{r7}
 80002c2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80002c4:	4b05      	ldr	r3, [pc, #20]	; (80002dc <HAL_IncTick+0x1c>)
 80002c6:	781b      	ldrb	r3, [r3, #0]
 80002c8:	461a      	mov	r2, r3
 80002ca:	4b05      	ldr	r3, [pc, #20]	; (80002e0 <HAL_IncTick+0x20>)
 80002cc:	681b      	ldr	r3, [r3, #0]
 80002ce:	4413      	add	r3, r2
 80002d0:	4a03      	ldr	r2, [pc, #12]	; (80002e0 <HAL_IncTick+0x20>)
 80002d2:	6013      	str	r3, [r2, #0]
}
 80002d4:	bf00      	nop
 80002d6:	46bd      	mov	sp, r7
 80002d8:	bc80      	pop	{r7}
 80002da:	4770      	bx	lr
 80002dc:	20000000 	.word	0x20000000
 80002e0:	20000020 	.word	0x20000020

080002e4 <__libc_init_array>:
 80002e4:	b570      	push	{r4, r5, r6, lr}
 80002e6:	2500      	movs	r5, #0
 80002e8:	4e0c      	ldr	r6, [pc, #48]	; (800031c <__libc_init_array+0x38>)
 80002ea:	4c0d      	ldr	r4, [pc, #52]	; (8000320 <__libc_init_array+0x3c>)
 80002ec:	1ba4      	subs	r4, r4, r6
 80002ee:	10a4      	asrs	r4, r4, #2
 80002f0:	42a5      	cmp	r5, r4
 80002f2:	d109      	bne.n	8000308 <__libc_init_array+0x24>
 80002f4:	f000 f81a 	bl	800032c <_init>
 80002f8:	2500      	movs	r5, #0
 80002fa:	4e0a      	ldr	r6, [pc, #40]	; (8000324 <__libc_init_array+0x40>)
 80002fc:	4c0a      	ldr	r4, [pc, #40]	; (8000328 <__libc_init_array+0x44>)
 80002fe:	1ba4      	subs	r4, r4, r6
 8000300:	10a4      	asrs	r4, r4, #2
 8000302:	42a5      	cmp	r5, r4
 8000304:	d105      	bne.n	8000312 <__libc_init_array+0x2e>
 8000306:	bd70      	pop	{r4, r5, r6, pc}
 8000308:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800030c:	4798      	blx	r3
 800030e:	3501      	adds	r5, #1
 8000310:	e7ee      	b.n	80002f0 <__libc_init_array+0xc>
 8000312:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000316:	4798      	blx	r3
 8000318:	3501      	adds	r5, #1
 800031a:	e7f2      	b.n	8000302 <__libc_init_array+0x1e>
 800031c:	08000344 	.word	0x08000344
 8000320:	08000344 	.word	0x08000344
 8000324:	08000344 	.word	0x08000344
 8000328:	08000348 	.word	0x08000348

0800032c <_init>:
 800032c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800032e:	bf00      	nop
 8000330:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000332:	bc08      	pop	{r3}
 8000334:	469e      	mov	lr, r3
 8000336:	4770      	bx	lr

08000338 <_fini>:
 8000338:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800033a:	bf00      	nop
 800033c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800033e:	bc08      	pop	{r3}
 8000340:	469e      	mov	lr, r3
 8000342:	4770      	bx	lr
