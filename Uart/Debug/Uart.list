
Uart.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000178  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000284  08000284  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000284  08000284  00020004  2**0
                  CONTENTS
  4 .ARM          00000000  08000284  08000284  00020004  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000284  08000284  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000284  08000284  00010284  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000288  08000288  00010288  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000004  20000000  0800028c  00020000  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  20000004  08000290  00020004  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000024  08000290  00020024  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
 12 .debug_info   00000d60  00000000  00000000  0002002d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00000483  00000000  00000000  00020d8d  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000001b0  00000000  00000000  00021210  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000168  00000000  00000000  000213c0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000151b5  00000000  00000000  00021528  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00001beb  00000000  00000000  000366dd  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0007aa7b  00000000  00000000  000382c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000b2d43  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000004ec  00000000  00000000  000b2dc0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000004 	.word	0x20000004
 8000128:	00000000 	.word	0x00000000
 800012c:	0800026c 	.word	0x0800026c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000008 	.word	0x20000008
 8000148:	0800026c 	.word	0x0800026c

0800014c <main>:
#include"stm32f1xx.h"

int main(void){
 800014c:	b480      	push	{r7}
 800014e:	af00      	add	r7, sp, #0
	while(1){
 8000150:	e7fe      	b.n	8000150 <main+0x4>

08000152 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000152:	b480      	push	{r7}
 8000154:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000156:	bf00      	nop
 8000158:	46bd      	mov	sp, r7
 800015a:	bc80      	pop	{r7}
 800015c:	4770      	bx	lr

0800015e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800015e:	b480      	push	{r7}
 8000160:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000162:	e7fe      	b.n	8000162 <HardFault_Handler+0x4>

08000164 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000164:	b480      	push	{r7}
 8000166:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000168:	e7fe      	b.n	8000168 <MemManage_Handler+0x4>

0800016a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800016a:	b480      	push	{r7}
 800016c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800016e:	e7fe      	b.n	800016e <BusFault_Handler+0x4>

08000170 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000170:	b480      	push	{r7}
 8000172:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000174:	e7fe      	b.n	8000174 <UsageFault_Handler+0x4>

08000176 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000176:	b480      	push	{r7}
 8000178:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800017a:	bf00      	nop
 800017c:	46bd      	mov	sp, r7
 800017e:	bc80      	pop	{r7}
 8000180:	4770      	bx	lr

08000182 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000182:	b480      	push	{r7}
 8000184:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000186:	bf00      	nop
 8000188:	46bd      	mov	sp, r7
 800018a:	bc80      	pop	{r7}
 800018c:	4770      	bx	lr

0800018e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800018e:	b480      	push	{r7}
 8000190:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000192:	bf00      	nop
 8000194:	46bd      	mov	sp, r7
 8000196:	bc80      	pop	{r7}
 8000198:	4770      	bx	lr

0800019a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800019a:	b580      	push	{r7, lr}
 800019c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800019e:	f000 f82f 	bl	8000200 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80001a2:	bf00      	nop
 80001a4:	bd80      	pop	{r7, pc}

080001a6 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80001a6:	b480      	push	{r7}
 80001a8:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80001aa:	bf00      	nop
 80001ac:	46bd      	mov	sp, r7
 80001ae:	bc80      	pop	{r7}
 80001b0:	4770      	bx	lr
	...

080001b4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 80001b4:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80001b6:	e003      	b.n	80001c0 <LoopCopyDataInit>

080001b8 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80001b8:	4b0b      	ldr	r3, [pc, #44]	; (80001e8 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 80001ba:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 80001bc:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 80001be:	3104      	adds	r1, #4

080001c0 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80001c0:	480a      	ldr	r0, [pc, #40]	; (80001ec <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 80001c2:	4b0b      	ldr	r3, [pc, #44]	; (80001f0 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 80001c4:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80001c6:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80001c8:	d3f6      	bcc.n	80001b8 <CopyDataInit>
  ldr r2, =_sbss
 80001ca:	4a0a      	ldr	r2, [pc, #40]	; (80001f4 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 80001cc:	e002      	b.n	80001d4 <LoopFillZerobss>

080001ce <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 80001ce:	2300      	movs	r3, #0
  str r3, [r2], #4
 80001d0:	f842 3b04 	str.w	r3, [r2], #4

080001d4 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 80001d4:	4b08      	ldr	r3, [pc, #32]	; (80001f8 <LoopFillZerobss+0x24>)
  cmp r2, r3
 80001d6:	429a      	cmp	r2, r3
  bcc FillZerobss
 80001d8:	d3f9      	bcc.n	80001ce <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80001da:	f7ff ffe4 	bl	80001a6 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80001de:	f000 f821 	bl	8000224 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80001e2:	f7ff ffb3 	bl	800014c <main>
  bx lr
 80001e6:	4770      	bx	lr
  ldr r3, =_sidata
 80001e8:	0800028c 	.word	0x0800028c
  ldr r0, =_sdata
 80001ec:	20000000 	.word	0x20000000
  ldr r3, =_edata
 80001f0:	20000004 	.word	0x20000004
  ldr r2, =_sbss
 80001f4:	20000004 	.word	0x20000004
  ldr r3, = _ebss
 80001f8:	20000024 	.word	0x20000024

080001fc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80001fc:	e7fe      	b.n	80001fc <ADC1_2_IRQHandler>
	...

08000200 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000200:	b480      	push	{r7}
 8000202:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000204:	4b05      	ldr	r3, [pc, #20]	; (800021c <HAL_IncTick+0x1c>)
 8000206:	781b      	ldrb	r3, [r3, #0]
 8000208:	461a      	mov	r2, r3
 800020a:	4b05      	ldr	r3, [pc, #20]	; (8000220 <HAL_IncTick+0x20>)
 800020c:	681b      	ldr	r3, [r3, #0]
 800020e:	4413      	add	r3, r2
 8000210:	4a03      	ldr	r2, [pc, #12]	; (8000220 <HAL_IncTick+0x20>)
 8000212:	6013      	str	r3, [r2, #0]
}
 8000214:	bf00      	nop
 8000216:	46bd      	mov	sp, r7
 8000218:	bc80      	pop	{r7}
 800021a:	4770      	bx	lr
 800021c:	20000000 	.word	0x20000000
 8000220:	20000020 	.word	0x20000020

08000224 <__libc_init_array>:
 8000224:	b570      	push	{r4, r5, r6, lr}
 8000226:	2500      	movs	r5, #0
 8000228:	4e0c      	ldr	r6, [pc, #48]	; (800025c <__libc_init_array+0x38>)
 800022a:	4c0d      	ldr	r4, [pc, #52]	; (8000260 <__libc_init_array+0x3c>)
 800022c:	1ba4      	subs	r4, r4, r6
 800022e:	10a4      	asrs	r4, r4, #2
 8000230:	42a5      	cmp	r5, r4
 8000232:	d109      	bne.n	8000248 <__libc_init_array+0x24>
 8000234:	f000 f81a 	bl	800026c <_init>
 8000238:	2500      	movs	r5, #0
 800023a:	4e0a      	ldr	r6, [pc, #40]	; (8000264 <__libc_init_array+0x40>)
 800023c:	4c0a      	ldr	r4, [pc, #40]	; (8000268 <__libc_init_array+0x44>)
 800023e:	1ba4      	subs	r4, r4, r6
 8000240:	10a4      	asrs	r4, r4, #2
 8000242:	42a5      	cmp	r5, r4
 8000244:	d105      	bne.n	8000252 <__libc_init_array+0x2e>
 8000246:	bd70      	pop	{r4, r5, r6, pc}
 8000248:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800024c:	4798      	blx	r3
 800024e:	3501      	adds	r5, #1
 8000250:	e7ee      	b.n	8000230 <__libc_init_array+0xc>
 8000252:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000256:	4798      	blx	r3
 8000258:	3501      	adds	r5, #1
 800025a:	e7f2      	b.n	8000242 <__libc_init_array+0x1e>
 800025c:	08000284 	.word	0x08000284
 8000260:	08000284 	.word	0x08000284
 8000264:	08000284 	.word	0x08000284
 8000268:	08000288 	.word	0x08000288

0800026c <_init>:
 800026c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800026e:	bf00      	nop
 8000270:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000272:	bc08      	pop	{r3}
 8000274:	469e      	mov	lr, r3
 8000276:	4770      	bx	lr

08000278 <_fini>:
 8000278:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800027a:	bf00      	nop
 800027c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800027e:	bc08      	pop	{r3}
 8000280:	469e      	mov	lr, r3
 8000282:	4770      	bx	lr
